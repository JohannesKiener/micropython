/*
 * This file is part of the MicroPython project, http://micropython.org/
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2019 Damien P. George
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
#ifndef MICROPY_INCLUDED_TM4C_SPI_H
#define MICROPY_INCLUDED_TM4C_SPI_H

#include <stdint.h>
#include CMSIS_HEADER
//#include "dma.h"
#include "inc/hw_ssi.h"
//#include "inc/hw_memmap.h"
#include "driverlib/ssi.h"


//extern const mp_obj_type_ttypedef struct _spi_t {
//     spi_obj_t *spi;
//     const dma_descr_t *tx_dma_descr;
//     const dma_descr_t *rx_dma_descr;
// } spi_t;

// typedef struct _spi_t {typedef struct _spi_t {
//     spi_obj_t *spi;
//     const dma_descr_t *tx_dma_descr;
//     const dma_descr_t *rx_dma_descr;
// } spi_t;
//     spi_obj_t *spi;
//     const dma_descr_t *tx_dma_descr;
//     const dma_descr_t *rx_dma_descr;
// } spi_t;

/// SPI id enum
typedef enum {
    SPI_NONE =4,
    SPI_0 = 0,
    SPI_1 = 1,
    SPI_2 = 2,
    SPI_3 = 3,
} spi_id_t;

/**
 *  SPI register struct for easy access 
 *  for register description, see datasheet
*/

typedef struct {                                    /*!< SSI0 Structure                                                        */
  __IO uint32_t  CR0;                               /*!< SSI Control 0                                                         */
  __IO uint32_t  CR1;                               /*!< SSI Control 1                                                         */
  __IO uint32_t  DR;                                /*!< SSI Data                                                              */
  __IO uint32_t  SR;                                /*!< SSI Status                                                            */
  __IO uint32_t  CPSR;                              /*!< SSI Clock Prescale                                                    */
  __IO uint32_t  IM;                                /*!< SSI Interrupt Mask                                                    */
  __IO uint32_t  RIS;                               /*!< SSI Raw Interrupt Status                                              */
  __IO uint32_t  MIS;                               /*!< SSI Masked Interrupt Status                                           */
  __O  uint32_t  ICR;                               /*!< SSI Interrupt Clear                                                   */
  __IO uint32_t  DMACTL;                            /*!< SSI DMA Control                                                       */
  __I  uint32_t  RESERVED[1000];
  __IO uint32_t  CC;                                /*!< SSI Clock Configuration                                               */
} periph_spi_t;


/**
 * spi config object type
*/
typedef struct _machine_hard_spi_obj_t {
    mp_obj_base_t base;
    uint32_t spi_base;          // base address of spi module
    uint32_t periph;            // address needed for tivaware sysctl functions
    periph_spi_t* regs;         // register access struct pointer (usage: spi_obj.regs->DR)
    uint32_t irqn;              // interrupt request number of module
    uint8_t mode : 1;           // SSI mode
    uint32_t baudrate;          // SSI baudrate 25MHz as master, 6.6MHz as slave
    uint8_t bits;               // SSI word length
    bool lsb_first : 1;         // endianness of data transfer
    // uint8_t polarity : 1;
    // uint8_t phase : 1;
    uint32_t protocol;          // transfer protocol (SPI0..3, MOTO, etc. see datasheet)
    spi_id_t spi_id : 3;        // SSI id 0..3, for identification purposes
    bool is_enabled : 1;        // enabeld bit
    bool soft_fss : 1;          // Frame signal generated by hardware, or manually
    uint8_t dma_enabled : 3;    // use dma ?
    uint8_t dma_channel_rx : 6; // dma receive channel
    uint8_t dma_channel_tx : 6; // dma transmit channel
} machine_hard_spi_obj_t;

// spi_obj_t spi_handle_0 = {
//     .spi = SSI0_BASE,
//     .periph = SYSCTL_PERIPH_SSI0,
//     .regs = (periph_spi_t*)SSI0_BASE,
//     .irqn = 0, 
//     .mode = SSI_MODE_MASTER, 
//     .phase = SSI_FRF_MOTO_MODE_0, 
//     .spi_id = PYB_SPI_0,
//     .is_enabled = false, 
//     .dma_rx_enabled = false,
//     .dma_tx_enabled = false,
// };

// spi_obj_t spi_handle_1 = {
//     .spi = SSI1_BASE,
//     .periph = SYSCTL_PERIPH_SSI1,
//     .regs = (periph_spi_t*)SSI1_BASE,
//     .irqn = 1, 
//     .mode = SSI_MODE_MASTER, 
//     .phase = SSI_FRF_MOTO_MODE_0, 
//     .spi_id = PYB_SPI_1,
//     .is_enabled = false, 
//     .dma_rx_enabled = false,
//     .dma_tx_enabled = false,
// };

// spi_obj_t spi_handle_2 = {
//     .spi = SSI2_BASE,
//     .periph = SYSCTL_PERIPH_SSI2,
//     .regs = (periph_spi_t*)SSI2_BASE,
//     .irqn = 2, 
//     .mode = SSI_MODE_MASTER, 
//     .phase = SSI_FRF_MOTO_MODE_0, 
//     .spi_id = PYB_SPI_2,
//     .is_enabled = false, 
//     .dma_rx_enabled = false,
//     .dma_tx_enabled = false,
// };

// spi_obj_t spi_handle_3 = {
//     .spi = SSI3_BASE,
//     .periph = SYSCTL_PERIPH_SSI3,
//     .regs = (periph_spi_t*)SSI3_BASE,
//     .irqn = 3, 
//     .mode = SSI_MODE_MASTER, 
//     .phase = SSI_FRF_MOTO_MODE_0, 
//     .spi_id = PYB_SPI_3,
//     .is_enabled = false, 
//     .dma_rx_enabled = false,
//     .dma_tx_enabled = false,
// };

//extern const spi_t spi_obj[6];

//extern const mp_obj_type_t pyb_spi_type;
extern const mp_obj_type_t machine_soft_spi_type;
extern const mp_obj_type_t machine_hard_spi_type;

void spi_init0(void);
void spi_init(const mp_obj_t *self);
//const spi_t *spi_from_mp_obj(mp_obj_t o);

#endif // MICROPY_INCLUDED_TM4C_SPI_H
